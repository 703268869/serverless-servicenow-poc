{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "IssueDashapiDashGETLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/servicenow-poc-flm-svc-poc-issue-api-GET"
      }
    },
    "IssueDashapiDashPOSTLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/servicenow-poc-flm-svc-poc-issue-api-POST"
      }
    },
    "RemarkDashapiDashGETLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/servicenow-poc-flm-svc-poc-remark-api-GET"
      }
    },
    "RemarkDashapiDashPOSTLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/servicenow-poc-flm-svc-poc-remark-api-POST"
      }
    },
    "TaskDashapiDashGETLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/servicenow-poc-flm-svc-poc-task-api-GET"
      }
    },
    "TaskDashapiDashPOSTLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/servicenow-poc-flm-svc-poc-task-api-POST"
      }
    },
    "TopicDashmasterDashapiDashGETLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/servicenow-poc-flm-svc-poc-topic-master-api-GET"
      }
    },
    "TopicDashmasterDashapiDashPOSTLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/servicenow-poc-flm-svc-poc-topic-master-api-POST"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "servicenow-poc-flm-svc",
                  "poc",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/servicenow-poc-flm-svc-poc*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/servicenow-poc-flm-svc-poc*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameter",
                    "ssm:GetParameterHistory",
                    "ssm:GetParameters",
                    "ssm:GetParametersByPath",
                    "secretsmanager:DescribeSecret",
                    "secretsmanager:ListSecretVersionIds",
                    "secretsmanager:ListSecrets",
                    "secretsmanager:GetSecretValue",
                    "secretsmanager:GetResourcePolicy",
                    "lambda:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "servicenow-poc-flm-svc",
              "poc",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "IssueDashapiDashGETLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "tas-deployments-bucket-poc-ap-south-1",
          "S3Key": "serverless/servicenow-poc-flm-svc/poc/1632456650373-2021-09-24T04:10:50.373Z/servicenow-poc-flm-svc-dev-issue-api-GET.zip"
        },
        "Handler": "modules/issue/api/get.fn",
        "Runtime": "nodejs14.x",
        "FunctionName": "servicenow-poc-flm-svc-poc-issue-api-GET",
        "MemorySize": 128,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "Stack",
            "Value": "POC"
          },
          {
            "Key": "Environment",
            "Value": "POC"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "NODE_ENV": "poc",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-03d11957474c5fad7"
          ],
          "SubnetIds": [
            "subnet-0a6df6a7c79a84043",
            "subnet-0f2d8fd6ab79a7454"
          ]
        }
      },
      "DependsOn": [
        "IssueDashapiDashGETLogGroup"
      ]
    },
    "IssueDashapiDashPOSTLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "tas-deployments-bucket-poc-ap-south-1",
          "S3Key": "serverless/servicenow-poc-flm-svc/poc/1632456650373-2021-09-24T04:10:50.373Z/servicenow-poc-flm-svc-dev-issue-api-POST.zip"
        },
        "Handler": "modules/issue/api/post.fn",
        "Runtime": "nodejs14.x",
        "FunctionName": "servicenow-poc-flm-svc-poc-issue-api-POST",
        "MemorySize": 128,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "Stack",
            "Value": "POC"
          },
          {
            "Key": "Environment",
            "Value": "POC"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "NODE_ENV": "poc",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-03d11957474c5fad7"
          ],
          "SubnetIds": [
            "subnet-0a6df6a7c79a84043",
            "subnet-0f2d8fd6ab79a7454"
          ]
        }
      },
      "DependsOn": [
        "IssueDashapiDashPOSTLogGroup"
      ]
    },
    "RemarkDashapiDashGETLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "tas-deployments-bucket-poc-ap-south-1",
          "S3Key": "serverless/servicenow-poc-flm-svc/poc/1632456650373-2021-09-24T04:10:50.373Z/servicenow-poc-flm-svc-dev-remark-api-GET.zip"
        },
        "Handler": "modules/remark/api/get.fn",
        "Runtime": "nodejs14.x",
        "FunctionName": "servicenow-poc-flm-svc-poc-remark-api-GET",
        "MemorySize": 128,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "Stack",
            "Value": "POC"
          },
          {
            "Key": "Environment",
            "Value": "POC"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "NODE_ENV": "poc",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-03d11957474c5fad7"
          ],
          "SubnetIds": [
            "subnet-0a6df6a7c79a84043",
            "subnet-0f2d8fd6ab79a7454"
          ]
        }
      },
      "DependsOn": [
        "RemarkDashapiDashGETLogGroup"
      ]
    },
    "RemarkDashapiDashPOSTLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "tas-deployments-bucket-poc-ap-south-1",
          "S3Key": "serverless/servicenow-poc-flm-svc/poc/1632456650373-2021-09-24T04:10:50.373Z/servicenow-poc-flm-svc-dev-remark-api-POST.zip"
        },
        "Handler": "modules/remark/api/post.fn",
        "Runtime": "nodejs14.x",
        "FunctionName": "servicenow-poc-flm-svc-poc-remark-api-POST",
        "MemorySize": 128,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "Stack",
            "Value": "POC"
          },
          {
            "Key": "Environment",
            "Value": "POC"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "NODE_ENV": "poc",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-03d11957474c5fad7"
          ],
          "SubnetIds": [
            "subnet-0a6df6a7c79a84043",
            "subnet-0f2d8fd6ab79a7454"
          ]
        }
      },
      "DependsOn": [
        "RemarkDashapiDashPOSTLogGroup"
      ]
    },
    "TaskDashapiDashGETLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "tas-deployments-bucket-poc-ap-south-1",
          "S3Key": "serverless/servicenow-poc-flm-svc/poc/1632456650373-2021-09-24T04:10:50.373Z/servicenow-poc-flm-svc-dev-task-api-GET.zip"
        },
        "Handler": "modules/task/api/get.fn",
        "Runtime": "nodejs14.x",
        "FunctionName": "servicenow-poc-flm-svc-poc-task-api-GET",
        "MemorySize": 128,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "Stack",
            "Value": "POC"
          },
          {
            "Key": "Environment",
            "Value": "POC"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "NODE_ENV": "poc",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-03d11957474c5fad7"
          ],
          "SubnetIds": [
            "subnet-0a6df6a7c79a84043",
            "subnet-0f2d8fd6ab79a7454"
          ]
        }
      },
      "DependsOn": [
        "TaskDashapiDashGETLogGroup"
      ]
    },
    "TaskDashapiDashPOSTLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "tas-deployments-bucket-poc-ap-south-1",
          "S3Key": "serverless/servicenow-poc-flm-svc/poc/1632456650373-2021-09-24T04:10:50.373Z/servicenow-poc-flm-svc-dev-task-api-POST.zip"
        },
        "Handler": "modules/task/api/post.fn",
        "Runtime": "nodejs14.x",
        "FunctionName": "servicenow-poc-flm-svc-poc-task-api-POST",
        "MemorySize": 128,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "Stack",
            "Value": "POC"
          },
          {
            "Key": "Environment",
            "Value": "POC"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "NODE_ENV": "poc",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-03d11957474c5fad7"
          ],
          "SubnetIds": [
            "subnet-0a6df6a7c79a84043",
            "subnet-0f2d8fd6ab79a7454"
          ]
        }
      },
      "DependsOn": [
        "TaskDashapiDashPOSTLogGroup"
      ]
    },
    "TopicDashmasterDashapiDashGETLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "tas-deployments-bucket-poc-ap-south-1",
          "S3Key": "serverless/servicenow-poc-flm-svc/poc/1632456650373-2021-09-24T04:10:50.373Z/servicenow-poc-flm-svc-dev-topic-master-api-GET.zip"
        },
        "Handler": "modules/topic-master/api/get.fn",
        "Runtime": "nodejs14.x",
        "FunctionName": "servicenow-poc-flm-svc-poc-topic-master-api-GET",
        "MemorySize": 128,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "Stack",
            "Value": "POC"
          },
          {
            "Key": "Environment",
            "Value": "POC"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "NODE_ENV": "poc",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-03d11957474c5fad7"
          ],
          "SubnetIds": [
            "subnet-0a6df6a7c79a84043",
            "subnet-0f2d8fd6ab79a7454"
          ]
        }
      },
      "DependsOn": [
        "TopicDashmasterDashapiDashGETLogGroup"
      ]
    },
    "TopicDashmasterDashapiDashPOSTLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "tas-deployments-bucket-poc-ap-south-1",
          "S3Key": "serverless/servicenow-poc-flm-svc/poc/1632456650373-2021-09-24T04:10:50.373Z/servicenow-poc-flm-svc-dev-topic-master-api-POST.zip"
        },
        "Handler": "modules/topic-master/api/post.fn",
        "Runtime": "nodejs14.x",
        "FunctionName": "servicenow-poc-flm-svc-poc-topic-master-api-POST",
        "MemorySize": 128,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "Stack",
            "Value": "POC"
          },
          {
            "Key": "Environment",
            "Value": "POC"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "NODE_ENV": "poc",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-03d11957474c5fad7"
          ],
          "SubnetIds": [
            "subnet-0a6df6a7c79a84043",
            "subnet-0f2d8fd6ab79a7454"
          ]
        }
      },
      "DependsOn": [
        "TopicDashmasterDashapiDashPOSTLogGroup"
      ]
    },
    "IssueDashapiDashPOSTLambdaVersionPesmGeE2wuC3H1Tq8tJpbS8GqADGmvxuM4t3Aiyg0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "IssueDashapiDashPOSTLambdaFunction"
        },
        "CodeSha256": "Glcm7aY2NNM7Abv7TDAXkzvztA6IFzhzY22+rXpgfpo="
      }
    },
    "RemarkDashapiDashPOSTLambdaVersionQswCzA3BYVPSCnSdvRu0c0JpoT8UeQ9uku4vKQBw0Y4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemarkDashapiDashPOSTLambdaFunction"
        },
        "CodeSha256": "r9H9zRuiTbIHrTiTiTKHUcYLWBhVvaqivV7ZdIzKaCc="
      }
    },
    "RemarkDashapiDashGETLambdaVersionRrhEuPyX2QId9VPiYZyF8BGZNzPdmHhQNK1u1ALc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemarkDashapiDashGETLambdaFunction"
        },
        "CodeSha256": "G6GDKLuBdNnxrdSFxXoffzgv8KE5pLG+aJc783SUKeY="
      }
    },
    "TaskDashapiDashGETLambdaVersioncM2IRXSwfrYLQDeTB5eEgqCezRcl9ChVR5skgoFNPg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TaskDashapiDashGETLambdaFunction"
        },
        "CodeSha256": "XWdOfQ2yiJpDL3ZBX27ehFJVaeAO/bNrxsO9RBZ/uC8="
      }
    },
    "TaskDashapiDashPOSTLambdaVersionxa5rr2Sf0Flnes57rAsBXe1T5xq0WgomZu0wEJZCL3I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TaskDashapiDashPOSTLambdaFunction"
        },
        "CodeSha256": "iefS5q073ycPvBlkX1+mqvinOlHDr2zTQI0wFUEhTZc="
      }
    },
    "TopicDashmasterDashapiDashGETLambdaVersioniB4ySLLsWPwMavIv21eylGXIEV2AVjRynFgDO8jdaQ8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TopicDashmasterDashapiDashGETLambdaFunction"
        },
        "CodeSha256": "d551ZQaWdvsrGtdWVSuhlM3RopBi0CNnFiM8P23Bvl0="
      }
    },
    "TopicDashmasterDashapiDashPOSTLambdaVersion3SfoUgqLrz5c9SNqXK22bcbXVNsli4PmyLoo9KnEY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TopicDashmasterDashapiDashPOSTLambdaFunction"
        },
        "CodeSha256": "UZJVXIwiOYz7TrgTcnXbABp5D0rF6ZUNvzVUnW5PP+Q="
      }
    },
    "IssueDashapiDashGETLambdaVersionbBJtECQQJQazl3fZNIrLGfl8BRL62JxSA4dnszWTNh0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "IssueDashapiDashGETLambdaFunction"
        },
        "CodeSha256": "jMtQBKcPd7mXD6x+ddV0Z6Qdn1HS6ThA3PrLbm8Dasc="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "servicenow-poc-flm-svc-poc",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": "",
        "MinimumCompressionSize": 1024
      }
    },
    "ApiGatewayResourceFlmDashsvc": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "flm-svc",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFlmDashsvcGetDashissue": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFlmDashsvc"
        },
        "PathPart": "get-issue",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFlmDashsvcPostDashissue": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFlmDashsvc"
        },
        "PathPart": "post-issue",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFlmDashsvcGetDashremark": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFlmDashsvc"
        },
        "PathPart": "get-remark",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFlmDashsvcPostDashremark": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFlmDashsvc"
        },
        "PathPart": "post-remark",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFlmDashsvcGetDashtask": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFlmDashsvc"
        },
        "PathPart": "get-task",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFlmDashsvcPostDashtask": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFlmDashsvc"
        },
        "PathPart": "post-task",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFlmDashsvcGetDashtopicDashmaster": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFlmDashsvc"
        },
        "PathPart": "get-topic-master",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFlmDashsvcPostDashtopicDashmaster": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFlmDashsvc"
        },
        "PathPart": "post-topic-master",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFlmDashsvcGetDashissueOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Access-Control-Allow-Origin,x-oauth-config-provider,Access-Control-Allow-Headers'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcGetDashissue"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFlmDashsvcPostDashissueOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Access-Control-Allow-Origin,x-oauth-config-provider,Access-Control-Allow-Headers'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcPostDashissue"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFlmDashsvcGetDashremarkOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Access-Control-Allow-Origin,x-oauth-config-provider,Access-Control-Allow-Headers'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcGetDashremark"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFlmDashsvcPostDashremarkOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Access-Control-Allow-Origin,x-oauth-config-provider,Access-Control-Allow-Headers'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcPostDashremark"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFlmDashsvcGetDashtaskOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Access-Control-Allow-Origin,x-oauth-config-provider,Access-Control-Allow-Headers'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcGetDashtask"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFlmDashsvcPostDashtaskOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Access-Control-Allow-Origin,x-oauth-config-provider,Access-Control-Allow-Headers'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcPostDashtask"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFlmDashsvcGetDashtopicDashmasterOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Access-Control-Allow-Origin,x-oauth-config-provider,Access-Control-Allow-Headers'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcGetDashtopicDashmaster"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFlmDashsvcPostDashtopicDashmasterOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Access-Control-Allow-Origin,x-oauth-config-provider,Access-Control-Allow-Headers'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcPostDashtopicDashmaster"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFlmDashsvcGetDashissueGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcGetDashissue"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "IssueDashapiDashGETLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "IssueDashapiDashGETLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFlmDashsvcPostDashissuePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcPostDashissue"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "IssueDashapiDashPOSTLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "IssueDashapiDashPOSTLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFlmDashsvcGetDashremarkGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcGetDashremark"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemarkDashapiDashGETLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RemarkDashapiDashGETLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFlmDashsvcPostDashremarkPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcPostDashremark"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemarkDashapiDashPOSTLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RemarkDashapiDashPOSTLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFlmDashsvcGetDashtaskGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcGetDashtask"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TaskDashapiDashGETLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TaskDashapiDashGETLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFlmDashsvcPostDashtaskPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcPostDashtask"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TaskDashapiDashPOSTLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TaskDashapiDashPOSTLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFlmDashsvcGetDashtopicDashmasterGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcGetDashtopicDashmaster"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TopicDashmasterDashapiDashGETLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TopicDashmasterDashapiDashGETLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFlmDashsvcPostDashtopicDashmasterPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFlmDashsvcPostDashtopicDashmaster"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TopicDashmasterDashapiDashPOSTLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TopicDashmasterDashapiDashPOSTLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1632456638016": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "poc"
      },
      "DependsOn": [
        "ApiGatewayMethodFlmDashsvcGetDashissueOptions",
        "ApiGatewayMethodFlmDashsvcPostDashissueOptions",
        "ApiGatewayMethodFlmDashsvcGetDashremarkOptions",
        "ApiGatewayMethodFlmDashsvcPostDashremarkOptions",
        "ApiGatewayMethodFlmDashsvcGetDashtaskOptions",
        "ApiGatewayMethodFlmDashsvcPostDashtaskOptions",
        "ApiGatewayMethodFlmDashsvcGetDashtopicDashmasterOptions",
        "ApiGatewayMethodFlmDashsvcPostDashtopicDashmasterOptions",
        "ApiGatewayMethodFlmDashsvcGetDashissueGet",
        "ApiGatewayMethodFlmDashsvcPostDashissuePost",
        "ApiGatewayMethodFlmDashsvcGetDashremarkGet",
        "ApiGatewayMethodFlmDashsvcPostDashremarkPost",
        "ApiGatewayMethodFlmDashsvcGetDashtaskGet",
        "ApiGatewayMethodFlmDashsvcPostDashtaskPost",
        "ApiGatewayMethodFlmDashsvcGetDashtopicDashmasterGet",
        "ApiGatewayMethodFlmDashsvcPostDashtopicDashmasterPost"
      ]
    },
    "IssueDashapiDashGETLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "IssueDashapiDashGETLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "IssueDashapiDashPOSTLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "IssueDashapiDashPOSTLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemarkDashapiDashGETLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemarkDashapiDashGETLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemarkDashapiDashPOSTLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemarkDashapiDashPOSTLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TaskDashapiDashGETLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TaskDashapiDashGETLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TaskDashapiDashPOSTLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TaskDashapiDashPOSTLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TopicDashmasterDashapiDashGETLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TopicDashmasterDashapiDashGETLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TopicDashmasterDashapiDashPOSTLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TopicDashmasterDashapiDashPOSTLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/api-gateway/servicenow-poc-flm-svc-poc"
      }
    },
    "CustomApiGatewayAccountCloudWatchRole": {
      "Type": "Custom::ApiGatewayAccountRole",
      "Version": 1,
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "poc",
                  "servicenow-poc-flm-svc",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "iam:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "role/*"
                      ]
                    ]
                  },
                  "Action": [
                    "iam:AttachRolePolicy",
                    "iam:CreateRole",
                    "iam:ListAttachedRolePolicies",
                    "iam:PassRole"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "apigateway:*::/account"
                      ]
                    ]
                  },
                  "Action": [
                    "apigateway:GET",
                    "apigateway:PATCH"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "tas-deployments-bucket-poc-ap-south-1",
          "S3Key": "serverless/servicenow-poc-flm-svc/poc/1632456650373-2021-09-24T04:10:50.373Z/custom-resources.zip"
        },
        "FunctionName": "servicenow-poc-flm-svc-poc-custom-resource-apigw-cw-role",
        "Handler": "apiGatewayCloudWatchRole/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs12.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "tas-deployments-bucket-poc-ap-south-1",
      "Export": {
        "Name": "sls-servicenow-poc-flm-svc-poc-ServerlessDeploymentBucketName"
      }
    },
    "IssueDashapiDashPOSTLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "IssueDashapiDashPOSTLambdaVersionPesmGeE2wuC3H1Tq8tJpbS8GqADGmvxuM4t3Aiyg0"
      },
      "Export": {
        "Name": "sls-servicenow-poc-flm-svc-poc-IssueDashapiDashPOSTLambdaFunctionQualifiedArn"
      }
    },
    "RemarkDashapiDashPOSTLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemarkDashapiDashPOSTLambdaVersionQswCzA3BYVPSCnSdvRu0c0JpoT8UeQ9uku4vKQBw0Y4"
      },
      "Export": {
        "Name": "sls-servicenow-poc-flm-svc-poc-RemarkDashapiDashPOSTLambdaFunctionQualifiedArn"
      }
    },
    "RemarkDashapiDashGETLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemarkDashapiDashGETLambdaVersionRrhEuPyX2QId9VPiYZyF8BGZNzPdmHhQNK1u1ALc"
      },
      "Export": {
        "Name": "sls-servicenow-poc-flm-svc-poc-RemarkDashapiDashGETLambdaFunctionQualifiedArn"
      }
    },
    "TaskDashapiDashGETLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TaskDashapiDashGETLambdaVersioncM2IRXSwfrYLQDeTB5eEgqCezRcl9ChVR5skgoFNPg"
      },
      "Export": {
        "Name": "sls-servicenow-poc-flm-svc-poc-TaskDashapiDashGETLambdaFunctionQualifiedArn"
      }
    },
    "TaskDashapiDashPOSTLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TaskDashapiDashPOSTLambdaVersionxa5rr2Sf0Flnes57rAsBXe1T5xq0WgomZu0wEJZCL3I"
      },
      "Export": {
        "Name": "sls-servicenow-poc-flm-svc-poc-TaskDashapiDashPOSTLambdaFunctionQualifiedArn"
      }
    },
    "TopicDashmasterDashapiDashGETLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TopicDashmasterDashapiDashGETLambdaVersioniB4ySLLsWPwMavIv21eylGXIEV2AVjRynFgDO8jdaQ8"
      },
      "Export": {
        "Name": "sls-servicenow-poc-flm-svc-poc-TopicDashmasterDashapiDashGETLambdaFunctionQualifiedArn"
      }
    },
    "TopicDashmasterDashapiDashPOSTLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TopicDashmasterDashapiDashPOSTLambdaVersion3SfoUgqLrz5c9SNqXK22bcbXVNsli4PmyLoo9KnEY"
      },
      "Export": {
        "Name": "sls-servicenow-poc-flm-svc-poc-TopicDashmasterDashapiDashPOSTLambdaFunctionQualifiedArn"
      }
    },
    "IssueDashapiDashGETLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "IssueDashapiDashGETLambdaVersionbBJtECQQJQazl3fZNIrLGfl8BRL62JxSA4dnszWTNh0"
      },
      "Export": {
        "Name": "sls-servicenow-poc-flm-svc-poc-IssueDashapiDashGETLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/poc"
          ]
        ]
      },
      "Export": {
        "Name": "sls-servicenow-poc-flm-svc-poc-ServiceEndpoint"
      }
    }
  }
}